import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';
import axios from 'axios';
import { toast } from 'react-hot-toast';

const API_BASE_URL = 'http://localhost:5000'; // Ensure it's pointing to your server

// Fetch all orders (Admin-specific)
export const fetchAdminOrders = createAsyncThunk(
  'admin/fetchAdminOrders',
  async (_, { rejectWithValue }) => {
    try {
      const response = await axios.get(`${API_BASE_URL}/api/admin/orders`);
      return response.data.orders;
    } catch (error) {
      const errorMsg = error.response?.data?.message || error.message;
      return rejectWithValue(errorMsg);
    }
  }
);

// Confirm an order (Admin-specific)
export const confirmAdminOrder = createAsyncThunk(
  'admin/confirmAdminOrder',
  async (orderId, { rejectWithValue }) => {
    try {
      const response = await axios.put(`${API_BASE_URL}/api/admin/orders/${orderId}/confirm`);
      toast.success('Order confirmed successfully');
      return response.data.order;
    } catch (error) {
      const errorMsg = error.response?.data?.message || error.message;
      toast.error(`Order confirmation failed: ${errorMsg}`);
      return rejectWithValue(errorMsg);
    }
  }
);

// Initial state
const initialState = {
  orders: [],
  loading: false,
  error: null,
};

// Admin slice for handling order management
const adminSlice = createSlice({
  name: 'admin',
  initialState,
  reducers: {},
  extraReducers: (builder) => {
    builder
      .addCase(fetchAdminOrders.pending, (state) => {
        state.loading = true;
      })
      .addCase(fetchAdminOrders.fulfilled, (state, action) => {
        state.orders = action.payload;
        state.loading = false;
      })
      .addCase(fetchAdminOrders.rejected, (state, action) => {
        state.error = action.payload;
        state.loading = false;
      })
      .addCase(confirmAdminOrder.pending, (state) => {
        state.loading = true;
      })
      .addCase(confirmAdminOrder.fulfilled, (state, action) => {
        const confirmedOrder = action.payload;
        state.orders = state.orders.map(order =>
          order._id === confirmedOrder._id ? confirmedOrder : order
        );
        state.loading = false;
      })
      .addCase(confirmAdminOrder.rejected, (state, action) => {
        state.error = action.payload;
        state.loading = false;
      });
  },
});

export default adminSlice.reducer;
